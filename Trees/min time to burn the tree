
TreeNode*<int> bfsMapParents(map<Treenode*<int>, TreeNode*<int>>& mapa, TreeNode*<int> root, int start){
    queue<TreeNode*<int>> q;
    q.push(root);
    TreeNode*<int> res;

    while(!q.empty()){
        for(int i=0; i<q.size(); ++i){
            TreeNode*<int> tmp=q.top();
            q.pop();
            if(tmp.left){
                q.push(tmp->left);
                mapa[tmp->left]=temp;
            }
            if(tmp.right){
                q.push(tmp->right);
                mapa[tmp->right] = tmp;
            }
            if(tmp->data==start) res= tmp;
        }
    }
    return res;
}

int burn(map<Treenode*<int>, TreeNode*<int>>& mapa, TreeNode*<int> begin){
    queue<TreeNode*<int>> q;
    q.push(begin);
    map<TreeNode*<int>, int> burnt;
    burnt[begin]=1;
    bool flag=false;
    int time=0;

    while(!q.empty()){
        for(int i=0; i<q.size(); ++i){
            TreeNode*<int> tmp=q.front();
            q.pop();
            if(burnt[tmp->left]!=1 && tmp->left){
                q.push(tmp->left);
                flag=true;
                burnt[tmp->left]=1;
            }
            if(burnt[tmp->right]!=1 && tmp->right){
                q.push(tmp->right);
                flag=true;
                burnt[tmp->right]=1;
            }
            if(burnt[mapa[tmp]]!=1 && mapa[tmp]){
                q.push(mapa[tmp]);
                flag=true;
                burnt[mapa[tmp]]=1;
            }
            if(flag) time++;
        }
        return time;
    }
}

int timemain(TreeNode*<int> root, int start){
    map<Treenode*<int>, TreeNode*<int>> mapa;
    TreeNode*<int> go = bfsMapParents(mapa, root,  start);
    int maxi = burn(mapa, root, go);
    return maxi;
}
